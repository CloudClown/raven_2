#!/usr/bin/env python

import roslib
roslib.load_manifest('raven_2_trajectory')
import rospy
from geometry_msgs.msg import *
from math import *
from raven_2_msgs.msg import *
from std_msgs.msg import Header
import copy
import sys,argparse, os.path

import tf
from tfx.canonical import *
from tfx.tb_angles import tb_angles

pub_cmd = None
tf_listener = None
start_time = None
init_pose_left = None
init_pose_right = None

tool_orientation = rotation_tb(0, 90, 0)

approach_start = 0.06
approach_end = 0.00
retract_end = 0.14
retract_drop = 0.06

circle_duration = rospy.Duration(3)
circle_radius = 0.032 #0.027
circle_x_adj = 0.008
circle_around = 2*pi + pi

class _Getch:
	"""Gets a single character from standard input.  Does not echo to the screen."""
	@staticmethod
	def is_ctrl_c(ch):
		return ord(ch) == 3
	
	class _GetchWindows:
		def __init__(self):
			import msvcrt
	
		def __call__(self):
			import msvcrt
			return msvcrt.getch()
	class _GetchUnix:
		def __init__(self):
			import tty, sys
	
		def __call__(self):
			import sys, tty, termios
			fd = sys.stdin.fileno()
			old_settings = termios.tcgetattr(fd)
			try:
				tty.setraw(sys.stdin.fileno())
				ch = sys.stdin.read(1)
			finally:
				termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
			return ch
	
	def __init__(self):
		try:
			self.impl = _Getch._GetchWindows()
		except ImportError:
			self.impl = _Getch._GetchUnix()

	def __call__(self): return self.impl()


class Stage:
	def __init__(self,name,duration,cb):
		self.name = name
		self.duration = rospy.Duration(duration)
		self.cb = cb
		self.is_wait = False
	
	def _wait(self,*args):
		start_time = rospy.Time.now()
		print 'press any key to continue'
		getch = _Getch()
		try:
			cmd = getch().lower()
			if ord(cmd) == 3:
				rospy.signal_shutdown('user terminated')
		except Exception, e:
			print 'exception:',e
		self.duration = rospy.Time.now() - start_time
	
	@staticmethod
	def WAIT(name='WAIT'):
		 s = Stage(name,0,None)
		 s.cb = s._wait
		 s.is_wait = True
		 return s
	
	@staticmethod
	def stage_breaks(stages):
		stage_breaks = [rospy.Duration(0)]
		for stage in stages:
			stage_breaks.append(stage.duration + stage_breaks[-1])
		return stage_breaks

def add_arm_cmd(cmd,arm_name,tool_pose,pose_option=ToolCommand.POSE_ABSOLUTE,grasp_option=ToolCommand.GRASP_OFF,grasp=0):
	cmd.arm_names.append(arm_name)
		
	arm_cmd = ArmCommand()
	arm_cmd.active = True
	
	tool_cmd = ToolCommand()
	tool_cmd.pose_option = pose_option
	tool_cmd.pose = tool_pose
	
	tool_cmd.grasp_option = ToolCommand.GRASP_INCREMENT_SIGN #grasp_option
	tool_cmd.grasp = 0 #grasp
	
	arm_cmd.tool_command = tool_cmd
	
	cmd.arms.append(arm_cmd)


class Foo:
	def __init__(self,height,center,radius):
		#self.init_pos = point(-0.108616,-0.02029,-0.1408) #point(-0.088616,-0.02029,-0.11908)
		#self.init_pos = point(-0.148616,-0.02029,-0.1408)
		self.init_pos = point(center[0],center[1],-0.1408)
		self.height = height
		self.radius = radius
		self.center = point(center[0],center[1],height)
		
		self.first_pos = self.center + [self.radius*cos(0),self.radius*sin(0),0]
	
	def move_pos(self,cmd,t,start_pos,end_pos,orientation):
		init_pos = start_pos
		end_pos = end_pos
		
		right_tool_pose = Pose()
		pt = point((end_pos - init_pos)*t + init_pos,copy=True)
		right_tool_pose.position = pt.msg.Point()
		right_tool_pose.orientation = orientation.msg.Quaternion()
		
		add_arm_cmd(cmd,'R',right_tool_pose)
	
	def goto_init_pose(self,cmd,t):
		init_pos = init_pose_right.position
		#end_pos = point(-0.088616,-0.02029,-0.11908)
		end_pos = self.init_pos
		
		right_tool_pose = Pose()
		pt = point((end_pos - init_pos)*t + init_pos,copy=True)
		right_tool_pose.position = pt.msg.Point()
		right_tool_pose.orientation = tool_orientation.slerp(init_pose_right.orientation,t).msg.Quaternion()
		
		add_arm_cmd(cmd,'R',right_tool_pose)
	
	def close_gripper(self,cmd,t):
		cmd.arm_names.append('R')
			
		arm_cmd = ArmCommand()
		arm_cmd.active = True
		
		tool_cmd = ToolCommand()
		tool_cmd.pose_option = ToolCommand.POSE_OFF
		
		tool_cmd.grasp_option = ToolCommand.GRASP_INCREMENT_SIGN
		tool_cmd.grasp = -1
		
		arm_cmd.tool_command = tool_cmd
		
		cmd.arms.append(arm_cmd)
	
	
	def lower_to_table(self,cmd,t):
		init_pos = self.init_pos
		end_pos = self.first_pos
		
		right_tool_pose = Pose()
		pt = point((end_pos - init_pos)*t + init_pos,copy=True)
		right_tool_pose.position = pt.msg.Point()
		right_tool_pose.orientation = tool_orientation.msg.Quaternion()
		
		add_arm_cmd(cmd,'R',right_tool_pose)
	
	def circle(self,cmd,t):
		right_tool_pose = Pose()
		#pt = point(self.center,copy=True)
		#pt.x += self.radius*cos(2.*pi*t)
		#pt.y += self.radius*sin(2.*pi*t)
		pt = self.center + [self.radius*cos(3*2.*pi*t),self.radius*sin(3*2.*pi*t),0]
		
		
		right_tool_pose.position = pt.msg.Point()
		right_tool_pose.orientation = tool_orientation.msg.Quaternion()
		
		add_arm_cmd(cmd,'R',right_tool_pose)
	
	

if __name__ == '__main__':
	rospy.init_node(os.path.basename(sys.argv[0][:-3]),anonymous=True)
	
	parser = argparse.ArgumentParser(add_help=False)
	
	parser.add_argument('-h','--height',type=float,default=-0.187)
	parser.add_argument('-c','--center',type=float,nargs=2,default=(-0.148616,-0.02029))
	parser.add_argument('-r','--radius',type=float,default=0.05)
	
	args = parser.parse_args(rospy.myargv()[1:])
	
	tf_listener = tf.TransformListener()
	rospy.loginfo('waiting for transform')
	tf_listener.waitForTransform('/0_link','/tool_R',rospy.Time(0),rospy.Duration(5))
	rospy.loginfo('got it')
	
	#init_pose_left = transform(tf_listener.lookupTransform('/0_link','/tool_L',rospy.Time(0)))
	init_pose_right = transform(tf_listener.lookupTransform('/0_link','/tool_R',rospy.Time(0)))
	print init_pose_right
	
	pub_cmd = rospy.Publisher('/raven_command', RavenCommand)
	
	header = Header()
	header.frame_id = '/0_link'
	
	foo = Foo(height=args.height,center=args.center,radius=args.radius)
	
	stages = []
	stages.append(Stage("Goto init Pose",3,foo.goto_init_pose))
	stages.append(Stage("Close gripper",2,foo.close_gripper))
	stages.append(Stage("Lower tool",2,foo.lower_to_table))
	
	leg_time = 25
	
	stages.append(Stage("circle",leg_time,foo.circle))
	
	start_time = rospy.Time.now()
	
	rate = rospy.Rate(50)
	
	cmd = None
	
	last_stage_ind = -1
	while not rospy.is_shutdown():
		stage_breaks = Stage.stage_breaks(stages)
		now = rospy.Time.now()
		dur_from_start = now - start_time
		stage_ind = 0
		for idx,stage_break in enumerate(stage_breaks):
			if stage_break > dur_from_start:
				stage_ind = idx-1
				break
		else:
			rospy.loginfo("Finished!")
			break
		stage_ind = min(stage_ind,last_stage_ind + 1)
			
		stage_changed = stage_ind != last_stage_ind
		last_stage_ind = stage_ind
		
		stage = stages[stage_ind]
		
		if stage.duration.is_zero():
			t = 1
		else:
			t = (dur_from_start - stage_breaks[stage_ind]).to_sec() / stage.duration.to_sec()
		
		if stage_changed:
			sys.stdout.write('\n')
			sys.stdout.flush()
			#print cmd
			rospy.loginfo("Entering stage #%i/%i %s (%fs)",stage_ind+1,len(stages),stage.name,stage.duration.to_sec())
			#print dur_from_start.to_sec(), [b.to_sec() for b in stage_breaks]
		else:
			sys.stdout.write("\r\x1b[K"+str(t))
			sys.stdout.flush()
		
		if stage.is_wait:
			stage.cb()
			continue
		
		header.stamp = now
		
		cmd = RavenCommand()
		cmd.header = header
		cmd.pedal_down = True
		
		stage.cb(cmd,t)
		
		if stage_changed:
			pass #print '\n\n' + str(cmd) + '\n\n'
		
		pub_cmd.publish(cmd)
		
		rate.sleep()
